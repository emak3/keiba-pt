import { 
  SlashCommandBuilder, 
  EmbedBuilder, 
  ActionRowBuilder, 
  ButtonBuilder, 
  ButtonStyle, 
  StringSelectMenuBuilder
} from 'discord.js';
import { getRacesByDate, getRaceById } from '../services/database/raceService.js';
import { getUser, saveUser } from '../services/database/userService.js';
import dayjs from 'dayjs';
import logger from '../utils/logger.js';

// ‰ºöÂ†¥„Ç≥„Éº„Éâ„Å®ÂêçÁß∞„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞
const venueCodeMap = {
  '01': 'Êú≠Âπå',
  '02': 'ÂáΩÈ§®',
  '03': 'Á¶èÂ≥∂',
  '04': 'Êñ∞ÊΩü',
  '05': 'Êù±‰∫¨',
  '06': '‰∏≠Â±±',
  '07': '‰∏≠‰∫¨',
  '08': '‰∫¨ÈÉΩ',
  '09': 'Èò™Á•û',
  '10': 'Â∞èÂÄâ',
  '31': 'ÂåóË¶ã',
  '32': 'Â≤©Ë¶ãÊ≤¢',
  '33': 'Â∏ØÂ∫É',
  '34': 'Êó≠Â∑ù',
  '35': 'ÁõõÂ≤°',
  '36': 'Ê∞¥Ê≤¢',
  '37': '‰∏äÂ±±',
  '38': '‰∏âÊù°',
  '39': 'Ë∂≥Âà©',
  '40': 'ÂÆáÈÉΩÂÆÆ',
  '41': 'È´òÂ¥é',
  '42': 'Êµ¶Âíå',
  '43': 'ËàπÊ©ã',
  '44': 'Â§ß‰∫ï',
  '45': 'Â∑ùÂ¥é',
  '46': 'ÈáëÊ≤¢',
  '47': 'Á¨†Êùæ',
  '48': 'ÂêçÂè§Â±ã',
  '49': '(Êú™‰ΩøÁî®Á´∂È¶¨Â†¥)',
  '50': 'ÂúíÁî∞',
  '51': 'Âß´Ë∑Ø',
  '52': 'ÁõäÁî∞',
  '53': 'Á¶èÂ±±',
  '54': 'È´òÁü•',
  '55': '‰ΩêË≥Ä',
  '56': 'ËçíÂ∞æ',
  '57': '‰∏≠Ê¥•',
  '58': 'Êú≠Âπå(Âú∞ÊñπÁ´∂È¶¨)',
  '59': 'ÂáΩÈ§®(Âú∞ÊñπÁ´∂È¶¨)',
  '60': 'Êñ∞ÊΩü(Âú∞ÊñπÁ´∂È¶¨)',
  '61': '‰∏≠‰∫¨(Âú∞ÊñπÁ´∂È¶¨)',
  '65': 'Â∏ØÂ∫É(„Å∞)'
};

export default {
  data: new SlashCommandBuilder()
    .setName('races')
    .setDescription('Êú¨Êó•„ÅÆ„É¨„Éº„Çπ‰∏ÄË¶ß„ÇíË°®Á§∫„Åó„Åæ„Åô')
    .addStringOption(option =>
      option.setName('date')
        .setDescription('Êó•‰ªòÔºàYYYYMMDDÂΩ¢Âºè„ÄÅÁ©∫ÁôΩ„ÅÆÂ†¥Âêà„ÅØ‰ªäÊó•Ôºâ')
        .setRequired(false)),

  async execute(interaction) {
    await interaction.deferReply();

    try {
      // „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Çí‰øùÂ≠ò
      await saveUser(
        interaction.user.id,
        interaction.user.username,
        interaction.user.displayAvatarURL()
      );

      // Êó•‰ªò„Ç™„Éó„Ç∑„Éß„É≥„ÅÆÂá¶ÁêÜ
      let dateOption = interaction.options.getString('date');
      let targetDate;

      if (dateOption) {
        // ÂÖ•Âäõ„Åï„Çå„ÅüÊó•‰ªò„ÅÆÊ§úË®º
        if (!/^\d{8}$/.test(dateOption)) {
          return await interaction.editReply('Êó•‰ªò„ÅØYYYYMMDDÂΩ¢Âºè„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ‰æã: 20250517');
        }
        targetDate = dateOption;
      } else {
        // ‰ªäÊó•„ÅÆÊó•‰ªò
        targetDate = dayjs().format('YYYYMMDD');
      }

      // Êó•‰ªò„ÅÆË°®Á§∫Áî®„Éï„Ç©„Éº„Éû„ÉÉ„Éà
      const displayDate = `${targetDate.slice(0, 4)}Âπ¥${targetDate.slice(4, 6)}Êúà${targetDate.slice(6, 8)}Êó•`;

      // „É¨„Éº„Çπ‰∏ÄË¶ß„ÇíÂèñÂæó
      const races = await getRacesByDate(targetDate);

      if (races.length === 0) {
        return await interaction.editReply(`${displayDate}„ÅÆ„É¨„Éº„ÇπÊÉÖÂ†±„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ`);
      }

      // ‰ºöÂ†¥„Ç≥„Éº„ÉâÂà•„Å´„É¨„Éº„Çπ„Çí„Ç∞„É´„Éº„ÉóÂåñ
      const venueGroups = groupRacesByVenueCode(races);

      // ‰ºöÂ†¥„É™„Çπ„Éà„Çí‰ΩúÊàêÔºàJRA„Å®NAR„ÅßÂàÜÈ°ûÔºâ
      const jraVenues = [];
      const narVenues = [];

      for (const venueCode in venueGroups) {
        const firstRace = venueGroups[venueCode][0];
        // ‰ºöÂ†¥Âêç„ÇíÊï¥ÂΩ¢
        const venueName = cleanVenueName(firstRace.venue);

        // ‰ºöÂ†¥„Ç≥„Éº„Éâ„Åå1-10„Å™„ÇâJRA„ÄÅ„Åù„Çå‰ª•Â§ñ„ÅØNAR
        if (parseInt(venueCode) >= 1 && parseInt(venueCode) <= 10) {
          jraVenues.push({
            code: venueCode,
            name: venueCodeMap[venueCode] || venueName,
            type: 'JRA'
          });
        } else {
          narVenues.push({
            code: venueCode,
            name: venueCodeMap[venueCode] || venueName,
            type: 'NAR'
          });
        }
      }

      // ‰ºöÂ†¥ÈÅ∏ÊäûÁî®„ÅÆ„Çª„É¨„ÇØ„Éà„É°„Éã„É•„Éº
      const selectRow = new ActionRowBuilder()
        .addComponents(
          new StringSelectMenuBuilder()
            .setCustomId(`races_select_venue_${targetDate}`)
            .setPlaceholder('‰ºöÂ†¥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ')
            .addOptions([
              ...jraVenues.map(venue => ({
                label: `${venue.name}ÔºàJRAÔºâ`,
                value: `${venue.code}_${targetDate}`,
                description: `${venue.name}Á´∂È¶¨Â†¥„ÅÆ„É¨„Éº„Çπ‰∏ÄË¶ß`,
                emoji: 'üèá'
              })),
              ...narVenues.map(venue => ({
                label: `${venue.name}ÔºàNARÔºâ`,
                value: `${venue.code}_${targetDate}`,
                description: `${venue.name}Á´∂È¶¨Â†¥„ÅÆ„É¨„Éº„Çπ‰∏ÄË¶ß`,
                emoji: 'üêé'
              }))
            ])
        );

      // ÂâçÊó•„ÉªÁøåÊó•„Éú„Çø„É≥
      const prevDate = dayjs(targetDate).subtract(1, 'day').format('YYYYMMDD');
      const nextDate = dayjs(targetDate).add(1, 'day').format('YYYYMMDD');

      const navigationRow = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId(`races_prev_${prevDate}`)
            .setLabel('ÂâçÊó•')
            .setStyle(ButtonStyle.Secondary),
          new ButtonBuilder()
            .setCustomId(`races_next_${nextDate}`)
            .setLabel('ÁøåÊó•')
            .setStyle(ButtonStyle.Secondary)
        );

      // JRA„Å®NAR„ÅÆ‰ºöÂ†¥Êï∞
      const jraCount = jraVenues.length;
      const narCount = narVenues.length;

      // ÂàùÊúüË°®Á§∫Ôºà‰ºöÂ†¥‰∏ÄË¶ßÔºâ„ÅÆ„Ç®„É≥„Éô„ÉÉ„Éâ
      const venueListEmbed = new EmbedBuilder()
        .setTitle(`${displayDate}„ÅÆÈñãÂÇ¨‰ºöÂ†¥‰∏ÄË¶ß`)
        .setColor(0x00b0f4)
        .setTimestamp();

      let description = '';

      if (jraCount > 0) {
        description += `**‚óÜ ‰∏≠Â§ÆÁ´∂È¶¨ÔºàJRAÔºâÔºö${jraCount}‰ºöÂ†¥**\n`;
        jraVenues.forEach(venue => {
          const raceCount = venueGroups[venue.code].length;
          description += `„Éª${venue.name}Ôºà${raceCount}„É¨„Éº„ÇπÔºâ\n`;
        });
        description += '\n';
      }

      if (narCount > 0) {
        description += `**‚óÜ Âú∞ÊñπÁ´∂È¶¨ÔºàNARÔºâÔºö${narCount}‰ºöÂ†¥**\n`;
        narVenues.forEach(venue => {
          const raceCount = venueGroups[venue.code].length;
          description += `„Éª${venue.name}Ôºà${raceCount}„É¨„Éº„ÇπÔºâ\n`;
        });
      }

      if (jraCount === 0 && narCount === 0) {
        description += 'ÈñãÂÇ¨‰ºöÂ†¥ÊÉÖÂ†±„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ\n';
      }

      description += '\n‰∏ã„ÅÆ„É°„Éã„É•„Éº„Åã„Çâ‰ºöÂ†¥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
      venueListEmbed.setDescription(description);

      // „É¨„Çπ„Éù„É≥„Çπ„ÇíÈÄÅ‰ø°
      await interaction.editReply({
        content: `${displayDate}„ÅÆ„É¨„Éº„Çπ‰∏ÄË¶ßÔºà${races.length}‰ª∂Ôºâ`,
        embeds: [venueListEmbed],
        components: [selectRow, navigationRow]
      });

      // „Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„ÅÆÂá¶ÁêÜ
      const filter = i =>
        i.customId.startsWith('races_prev_') ||
        i.customId.startsWith('races_next_') ||
        i.customId.startsWith('races_select_venue_') ||
        i.customId.startsWith('races_back_') ||
        i.customId.startsWith('races_select_race_') ||
        i.customId.startsWith('bet_select_type_');

      const collector = interaction.channel.createMessageComponentCollector({
        filter,
        time: 600000 // 10ÂàÜÈñìÊúâÂäπ
      });

      // „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥Â±•Ê≠¥
      const history = {
        currentDate: targetDate,
        previousStates: [] // Êàª„Çã„Éú„Çø„É≥Áî®„ÅÆÂ±•Ê≠¥
      };

      collector.on('collect', async i => {
        // Âà•„É¶„Éº„Ç∂„Éº„ÅÆ„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„ÇíÊãíÂê¶
        if (i.user.id !== interaction.user.id) {
          try {
            await i.reply({ 
              content: '„Åì„ÅÆ„É°„Éã„É•„Éº„ÅØ‰ªñ„ÅÆ„É¶„Éº„Ç∂„Éº„ÅÆ„Ç≥„Éû„É≥„ÉâÁµêÊûúÁî®„Åß„Åô„ÄÇËá™ÂàÜ„Åß `/races` „Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', 
              ephemeral: true 
            });
          } catch (replyError) {
            logger.error(`‰ªñ„É¶„Éº„Ç∂„Éº„Å∏„ÅÆË≠¶Âëä„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„Ç®„É©„Éº: ${replyError}`);
          }
          return;
        }

        try {
          if (i.customId.startsWith('races_prev_') || i.customId.startsWith('races_next_')) {
            // Êó•‰ªòÁßªÂãï„ÅÆÂá¶ÁêÜ
            try {
              const newDate = i.customId.split('_')[2];
              history.previousStates.push({
                date: history.currentDate,
                venue: null // ÂÖ®‰ΩìË°®Á§∫„Å´Êàª„Çã
              });
              history.currentDate = newDate;

              try {
                await i.deferUpdate();
              } catch (deferError) {
                logger.warn(`deferUpdate „Ç®„É©„Éº (ÁÑ°Ë¶ñ„Åó„Å¶Á∂öË°å): ${deferError}`);
              }

              try {
                await i.editReply({ content: 'Ë™≠„ÅøËæº„Åø‰∏≠...', embeds: [], components: [] });
              } catch (editError) {
                logger.warn(`editReply „Ç®„É©„Éº (ÁÑ°Ë¶ñ„Åó„Å¶Á∂öË°å): ${editError}`);
              }

              // Êñ∞„Åó„ÅÑÊó•‰ªò„Åß„Ç≥„Éû„É≥„Éâ„ÇíÂÜçÂÆüË°å
              const command = interaction.client.commands.get('races');
              const newInteraction = {
                ...interaction,
                options: {
                  getString: () => newDate
                },
                editReply: async (options) => {
                  try {
                    return await i.editReply(options);
                  } catch (editError) {
                    logger.error(`Á∑®ÈõÜ„Ç®„É©„Éº: ${editError}`);
                    try {
                      return await i.followUp({ ...options, ephemeral: false });
                    } catch (followupError) {
                      logger.error(`„Éï„Ç©„É≠„Éº„Ç¢„ÉÉ„Éó„Ç®„É©„Éº: ${followupError}`);
                    }
                  }
                }
              };

              await command.execute(newInteraction);
            } catch (error) {
              logger.error(`Êó•‰ªòÁßªÂãïÂá¶ÁêÜ„Ç®„É©„Éº: ${error}`);
              handleInteractionError(i, error);
            }
          }
          // ‰ºöÂ†¥ÈÅ∏Êäû
          else if (i.customId.startsWith('races_select_venue_')) {
            try {
              const [venueCode, date] = i.values[0].split('_');
              history.previousStates.push({
                date: history.currentDate,
                venue: null // ÂÖ®‰ΩìË°®Á§∫„Å´Êàª„Çã
              });

              try {
                await i.deferUpdate();
              } catch (deferError) {
                logger.warn(`deferUpdate „Ç®„É©„Éº (ÁÑ°Ë¶ñ„Åó„Å¶Á∂öË°å): ${deferError}`);
              }

              // ÈÅ∏Êäû„Åï„Çå„Åü‰ºöÂ†¥„ÅÆ„É¨„Éº„Çπ„ÇíË°®Á§∫
              await displayVenueRaces(i, venueCode, date, history, races);
            } catch (error) {
              logger.error(`‰ºöÂ†¥ÈÅ∏ÊäûÂá¶ÁêÜ„Ç®„É©„Éº: ${error}`);
              handleInteractionError(i, error);
            }
          }
          // Êàª„Çã„Éú„Çø„É≥
          else if (i.customId.startsWith('races_back_')) {
            try {
              if (history.previousStates.length > 0) {
                const previousState = history.previousStates.pop();

                try {
                  await i.deferUpdate();
                } catch (deferError) {
                  logger.warn(`deferUpdate „Ç®„É©„Éº (ÁÑ°Ë¶ñ„Åó„Å¶Á∂öË°å): ${deferError}`);
                }

                if (previousState.venue) {
                  // ÁâπÂÆö„ÅÆ‰ºöÂ†¥„Å´Êàª„Çã
                  await displayVenueRaces(i, previousState.venue, previousState.date, history, races);
                } else {
                  // ‰ºöÂ†¥‰∏ÄË¶ß„Å´Êàª„Çã
                  try {
                    await i.editReply({ content: '‰ºöÂ†¥‰∏ÄË¶ß„Å´Êàª„Çä„Åæ„Åô...', embeds: [], components: [] });
                  } catch (editError) {
                    logger.warn(`Êàª„Çã‰∏≠Èñì„É°„ÉÉ„Çª„Éº„Ç∏„Ç®„É©„Éº: ${editError}`);
                  }

                  const command = interaction.client.commands.get('races');
                  const newInteraction = {
                    ...interaction,
                    options: {
                      getString: () => previousState.date
                    },
                    editReply: async (options) => {
                      try {
                        return await i.editReply(options);
                      } catch (editError) {
                        logger.error(`Á∑®ÈõÜ„Ç®„É©„Éº: ${editError}`);
                        try {
                          return await i.followUp({ ...options, ephemeral: false });
                        } catch (followupError) {
                          logger.error(`„Éï„Ç©„É≠„Éº„Ç¢„ÉÉ„Éó„Ç®„É©„Éº: ${followupError}`);
                        }
                      }
                    }
                  };

                  await command.execute(newInteraction);
                }
              } else {
                try {
                  await i.update({ content: 'Ââç„ÅÆÁîªÈù¢„Å´Êàª„Çå„Åæ„Åõ„Çì„ÄÇ' });
                } catch (updateError) {
                  logger.warn(`Â±•Ê≠¥„Å™„Åó„Ç®„É©„Éº (Ê¨°„ÅÆÂá¶ÁêÜ„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ): ${updateError}`);
                  try {
                    await i.editReply({ content: 'Ââç„ÅÆÁîªÈù¢„Å´Êàª„Çå„Åæ„Åõ„Çì„ÄÇ' });
                  } catch (editError) {
                    logger.error(`Â±•Ê≠¥„Å™„Åó„Ç®„É©„ÉºÁ∑®ÈõÜÂ§±Êïó: ${editError}`);
                  }
                }
              }
            } catch (error) {
              logger.error(`Êàª„Çã„Éú„Çø„É≥Âá¶ÁêÜ„Ç®„É©„Éº: ${error}`);
              handleInteractionError(i, error);
            }
          }
          // „É¨„Éº„ÇπÈÅ∏Êäû
          else if (i.customId.startsWith('races_select_race_')) {
            try {
              try {
                await i.deferUpdate();
              } catch (deferError) {
                logger.warn(`deferUpdate „Ç®„É©„Éº (ÁÑ°Ë¶ñ„Åó„Å¶Á∂öË°å): ${deferError}`);
              }

              const raceId = i.values[0];

              if (!raceId) {
                logger.error('„É¨„Éº„ÇπÈÅ∏Êäû: „É¨„Éº„ÇπID„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü');
                await i.editReply({
                  content: '„É¨„Éº„ÇπÊÉÖÂ†±„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ',
                  components: []
                });
                return;
              }

              try {
                await i.editReply({
                  content: `„É¨„Éº„ÇπÊÉÖÂ†±„ÇíË™≠„ÅøËæº„Åø‰∏≠...`,
                  embeds: [],
                  components: []
                });
              } catch (editError) {
                logger.warn(`„É¨„Éº„ÇπÊÉÖÂ†±Ë™≠„ÅøËæº„Åø‰∏≠Ë°®Á§∫„Ç®„É©„Éº: ${editError}`);
              }

              const currentDate = history.currentDate || targetDate;
              await displayRaceDetail(i, raceId, currentDate, history);
            } catch (error) {
              logger.error(`„É¨„Éº„ÇπÈÅ∏ÊäûÂá¶ÁêÜ„Ç®„É©„Éº: ${error}`);
              handleInteractionError(i, error);
            }
          }
          // È¶¨Âà∏„Çø„Ç§„ÉóÈÅ∏Êäû („Åì„Åì„Åã„ÇâÈ¶¨Âà∏Ë≥ºÂÖ•„Éó„É≠„Çª„Çπ„ÅåÂßã„Åæ„Çã„ÅÆ„Åß„ÄÅ„Éô„ÉÉ„Éà„Ç≥„Éû„É≥„Éâ„Å´ÁßªË≠≤)
          else if (i.customId.startsWith('bet_select_type_')) {
            try {
              // „Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„ÇíÊñ∞„Åó„ÅÑ„Ç≥„Éû„É≥„Éâ„Å´Ëª¢ÈÄÅ
              const raceId = i.customId.split('_')[3];
              
              // bet „Ç≥„Éû„É≥„Éâ„ÇíÂèñÂæó
              const betCommand = interaction.client.commands.get('bet');
              
              if (betCommand) {
                // bet „Ç≥„Éû„É≥„Éâ„Å´„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„ÇíËª¢ÈÄÅ
                const customInteraction = {
                  ...i,
                  options: {
                    getString: (name) => {
                      if (name === 'race_id') return raceId;
                      if (name === 'type') return i.values[0];
                      return null;
                    },
                    getInteger: (name) => {
                      if (name === 'amount') return 100; // „Éá„Éï„Ç©„É´„ÉàÈáëÈ°ç
                      return null;
                    }
                  }
                };
                
                try {
                  await i.deferUpdate();
                } catch (deferError) {
                  logger.warn(`deferUpdate „Ç®„É©„Éº (ÁÑ°Ë¶ñ„Åó„Å¶Á∂öË°å): ${deferError}`);
                }
                
                await betCommand.execute(customInteraction);
              } else {
                await i.reply({
                  content: 'È¶¨Âà∏Ë≥ºÂÖ•Ê©üËÉΩ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ',
                  ephemeral: true
                });
              }
            } catch (error) {
              logger.error(`È¶¨Âà∏„Çø„Ç§„ÉóÈÅ∏ÊäûÂá¶ÁêÜ„Ç®„É©„Éº: ${error}`);
              handleInteractionError(i, error);
            }
          }
        } catch (error) {
          logger.error(`„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥Âá¶ÁêÜÂÖ®‰Ωì„Åß„ÅÆ„Ç®„É©„Éº: ${error}`);
          handleInteractionError(i, error);
        }
      });

      async function handleInteractionError(interaction, error) {
        try {
          if (interaction.replied) {
            await interaction.followUp({
              content: '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶Êìç‰Ωú„Çí„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ',
              ephemeral: true
            });
          } else if (interaction.deferred) {
            await interaction.editReply({
              content: '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶Êìç‰Ωú„Çí„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ',
            });
          } else {
            if (typeof interaction.update === 'function') {
              try {
                await interaction.update({
                  content: '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶Êìç‰Ωú„Çí„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ',
                });
              } catch (updateError) {
                try {
                  await interaction.reply({
                    content: '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶Êìç‰Ωú„Çí„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ',
                    ephemeral: true
                  });
                } catch (replyError) {
                  logger.error(`ÂøúÁ≠îÂ§±Êïó: ${replyError}`);
                }
              }
            } else {
              try {
                await interaction.reply({
                  content: '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶Êìç‰Ωú„Çí„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ',
                  ephemeral: true
                });
              } catch (replyError) {
                logger.error(`ÂøúÁ≠îÂ§±Êïó: ${replyError}`);
              }
            }
          }
        } catch (responseError) {
          logger.error(`„Ç®„É©„ÉºÈÄöÁü•‰∏≠„ÅÆ‰∫åÊ¨°„Ç®„É©„Éº: ${responseError}`);
        }
      }

      collector.on('end', () => {
        // „Ç≥„É¨„ÇØ„Çø„Éº„ÅÆÁµÇ‰∫ÜÊôÇ„ÅÆÂá¶ÁêÜ
      });

    } catch (error) {
      logger.error(`„É¨„Éº„Çπ‰∏ÄË¶ßË°®Á§∫‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error}`);
      await interaction.editReply({ content: '„É¨„Éº„ÇπÊÉÖÂ†±„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„ÅèÁµå„Å£„Å¶„Åã„Çâ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ' });
    }
  }
};

/**
 * „É¨„Éº„Çπ„Çí‰ºöÂ†¥„Ç≥„Éº„ÉâÂà•„Å´„Ç∞„É´„Éº„ÉóÂåñ
 * @param {Array} races - „É¨„Éº„Çπ‰∏ÄË¶ß
 * @returns {Object} ‰ºöÂ†¥„Ç≥„Éº„ÉâÂà•„ÅÆ„É¨„Éº„Çπ‰∏ÄË¶ß
 */
function groupRacesByVenueCode(races) {
  const venueGroups = {};

  races.forEach(race => {
    // „É¨„Éº„ÇπID„Åã„Çâ‰ºöÂ†¥„Ç≥„Éº„Éâ„ÇíÊäΩÂá∫Ôºà5-6Ê°ÅÁõÆÔºâ
    const venueCode = extractVenueCode(race.id);

    if (!venueGroups[venueCode]) {
      venueGroups[venueCode] = [];
    }

    // ‰ºöÂ†¥Âêç„ÇíÊõ¥Êñ∞Ôºà‰ºöÂ†¥„Ç≥„Éº„Éâ„Åã„ÇâÂèñÂæó„Åó„ÅüÂêçÂâç„ÇíÂÑ™ÂÖàÔºâ
    const updatedRace = {
      ...race,
      extractedVenue: venueCodeMap[venueCode] || race.venue // ÂÖÉ„ÅÆ‰ºöÂ†¥Âêç„Çí„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó
    };

    venueGroups[venueCode].push(updatedRace);
  });

  // ÂêÑ„Ç∞„É´„Éº„ÉóÂÜÖ„Åß„É¨„Éº„ÇπÁï™Âè∑È†Ü„Å´„ÇΩ„Éº„Éà
  for (const venueCode in venueGroups) {
    venueGroups[venueCode].sort((a, b) => a.number - b.number);
  }

  return venueGroups;
}

/**
 * „É¨„Éº„ÇπID„Åã„Çâ‰ºöÂ†¥„Ç≥„Éº„Éâ„ÇíÊäΩÂá∫
 * @param {string} raceId - „É¨„Éº„ÇπIDÔºà‰æãÔºö202504010501Ôºâ
 * @returns {string} ‰ºöÂ†¥„Ç≥„Éº„ÉâÔºà‰æãÔºö04Ôºâ
 */
function extractVenueCode(raceId) {
  // „É¨„Éº„ÇπID„ÅØ12Ê°Å„ÅÆÊï∞Â≠ó„Åß„ÄÅ5-6Ê°ÅÁõÆ„Åå‰ºöÂ†¥„Ç≥„Éº„Éâ
  if (raceId && raceId.length >= 6) {
    return raceId.substring(4, 6);
  }
  return '00';
}

/**
 * ‰ºöÂ†¥Âêç„Åã„Çâ„Äå‚óãÂõû‚ñ≥‚ñ≥‚ñ≥Êó•ÁõÆ„Äç„Å™„Å©„ÅÆ‰ΩôÂàÜ„Å™ÊÉÖÂ†±„ÇíÂâäÈô§
 * @param {string} venue - ‰ºöÂ†¥Âêç
 * @returns {string} Êï¥ÂΩ¢„Åï„Çå„Åü‰ºöÂ†¥Âêç
 */
function cleanVenueName(venue) {
  if (!venue) return '‰∏çÊòé';

  // „Äå‚óãÂõû„Äç„ÇÑ„Äå‚óãÊó•ÁõÆ„Äç„Å™„Å©„ÅÆ„Éë„Çø„Éº„É≥„ÇíÂê´„Åæ„Å™„ÅÑ„É°„Ç§„É≥‰ºöÂ†¥Âêç„ÇíÊäΩÂá∫
  const mainVenueMatch = venue.match(/(?:[\d]+Âõû)?([^\d]+)(?:[\d]+Êó•ÁõÆ)?/);
  if (mainVenueMatch && mainVenueMatch[1]) {
    return mainVenueMatch[1].trim();
  }

  return venue;
}

/**
 * ‰ºöÂ†¥Âà•„ÅÆ„É¨„Éº„Çπ‰∏ÄË¶ß„ÇíË°®Á§∫
 * @param {MessageComponentInteraction} interaction - „Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥
 * @param {string} venueCode - ‰ºöÂ†¥„Ç≥„Éº„Éâ
 * @param {string} dateString - Êó•‰ªò
 * @param {Object} history - „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥Â±•Ê≠¥
 * @param {Array} allRaces - „Åô„Åπ„Å¶„ÅÆ„É¨„Éº„Çπ‰∏ÄË¶ßÔºàÊó¢„Å´ÂèñÂæóÊ∏à„ÅøÔºâ
 */
async function displayVenueRaces(interaction, venueCode, dateString, history, allRaces) {
  try {
    // ‰ºöÂ†¥„Ç≥„Éº„Éâ„Å´ÂêàËá¥„Åô„Çã„É¨„Éº„Çπ„ÇíÊäΩÂá∫
    const venueRaces = allRaces.filter(race => extractVenueCode(race.id) === venueCode);

    // „É¨„Éº„Çπ„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà
    if (venueRaces.length === 0) {
      return await interaction.editReply({
        content: `ÈÅ∏Êäû„Åï„Çå„Åü‰ºöÂ†¥„ÅÆ„É¨„Éº„ÇπÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ`,
        embeds: [],
        components: []
      });
    }

    // Êó•‰ªò„ÅÆË°®Á§∫Áî®„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    const displayDate = `${dateString.slice(0, 4)}Âπ¥${dateString.slice(4, 6)}Êúà${dateString.slice(6, 8)}Êó•`;

    // ‰ºöÂ†¥Âêç„Å®ÈñãÂÇ¨Âõû„ÇíÂèñÂæó
    const firstRace = venueRaces[0];
    const venueName = venueCodeMap[venueCode] || cleanVenueName(firstRace.venue);

    // ÈñãÂÇ¨ÂõûÊÉÖÂ†±„ÇíÊäΩÂá∫
    let roundInfo = '';
    const roundMatch = firstRace.venue.match(/([\d]+Âõû.+[\d]+Êó•ÁõÆ)/);
    if (roundMatch) {
      roundInfo = ` (${roundMatch[1]})`;
    }

    // ‰ºöÂ†¥Á®ÆÂà•ÔºàJRA„ÅãNAR„ÅãÔºâ
    const venueType = parseInt(venueCode) >= 1 && parseInt(venueCode) <= 10 ? 'JRA' : 'NAR';

    // „É¨„Éº„Çπ‰∏ÄË¶ß„ÅÆ„Ç®„É≥„Éô„ÉÉ„Éâ
    const raceListEmbed = new EmbedBuilder()
      .setTitle(`${displayDate} ${venueName}${roundInfo}Ôºà${venueType}Ôºâ„É¨„Éº„Çπ‰∏ÄË¶ß`)
      .setColor(venueType === 'JRA' ? 0x00b0f4 : 0xf47200)
      .setTimestamp();

    let description = '';

    // „É¨„Éº„Çπ‰∏ÄË¶ß„ÇíÊï¥ÂΩ¢
    venueRaces.forEach(race => {
      const statusEmoji = getStatusEmoji(race.status);
      description += `${statusEmoji} **${race.number}R** ${race.time} „Äê${race.name}„Äë\n`;
      description += `‚Üí „É¨„Éº„ÇπID: \`${race.id}\`\n\n`;
    });

    raceListEmbed.setDescription(description);

    // „É¨„Éº„ÇπÈÅ∏Êäû„É°„Éã„É•„Éº
    const raceSelectRow = new ActionRowBuilder()
      .addComponents(
        new StringSelectMenuBuilder()
          .setCustomId(`races_select_race_${dateString}`)
          .setPlaceholder('„É¨„Éº„Çπ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ')
          .addOptions(
            venueRaces.map(race => ({
              label: `${race.number}R ${race.name.substring(0, 80)}`,
              value: race.id,
              description: `Áô∫Ëµ∞ÊôÇÂàª: ${race.time}`.substring(0, 100),
              emoji: getStatusEmoji(race.status)
            }))
          )
      );

    // Êàª„Çã„Éú„Çø„É≥
    const backRow = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`races_back_${dateString}`)
          .setLabel('‰ºöÂ†¥‰∏ÄË¶ß„Å´Êàª„Çã')
          .setStyle(ButtonStyle.Primary)
      );

    // ÂâçÊó•„ÉªÁøåÊó•„Éú„Çø„É≥
    const prevDate = dayjs(dateString).subtract(1, 'day').format('YYYYMMDD');
    const nextDate = dayjs(dateString).add(1, 'day').format('YYYYMMDD');

    const navigationRow = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`races_prev_${prevDate}`)
          .setLabel('ÂâçÊó•')
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId(`races_next_${nextDate}`)
          .setLabel('ÁøåÊó•')
          .setStyle(ButtonStyle.Secondary)
      );

    // „É¨„Çπ„Éù„É≥„Çπ„ÇíÊõ¥Êñ∞
    try {
      await interaction.editReply({
        content: `${displayDate} ${venueName}${roundInfo}Ôºà${venueType}Ôºâ„ÅÆ„É¨„Éº„Çπ‰∏ÄË¶ßÔºà${venueRaces.length}‰ª∂Ôºâ\n„É¨„Éº„Çπ„ÇíÈÅ∏Êäû„Åó„Å¶È¶¨Âà∏„ÇíË≥ºÂÖ•„Åß„Åç„Åæ„Åô„ÄÇ`,
        embeds: [raceListEmbed],
        components: [raceSelectRow, backRow, navigationRow]
      });
    } catch (editError) {
      logger.error(`„É¨„Çπ„Éù„É≥„ÇπÊõ¥Êñ∞„Ç®„É©„Éº: ${editError}`);
      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Å®„Åó„Å¶„Éï„Ç©„É≠„Éº„Ç¢„ÉÉ„Éó„ÇíË©¶„Åô
      try {
        await interaction.followUp({
          content: `${displayDate} ${venueName}${roundInfo}Ôºà${venueType}Ôºâ„ÅÆ„É¨„Éº„Çπ‰∏ÄË¶ßÔºà${venueRaces.length}‰ª∂Ôºâ\n„É¨„Éº„Çπ„ÇíÈÅ∏Êäû„Åó„Å¶È¶¨Âà∏„ÇíË≥ºÂÖ•„Åß„Åç„Åæ„Åô„ÄÇ`,
          embeds: [raceListEmbed],
          components: [raceSelectRow, backRow, navigationRow],
          ephemeral: false
        });
      } catch (followUpError) {
        logger.error(`„Éï„Ç©„É≠„Éº„Ç¢„ÉÉ„ÉóÊõ¥Êñ∞„ÇÇ„Ç®„É©„Éº: ${followUpError}`);
      }
    }
  } catch (error) {
    logger.error(`‰ºöÂ†¥Âà•„É¨„Éº„Çπ‰∏ÄË¶ßË°®Á§∫‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error}`);
    throw error;
  }
}

/**
 * „É¨„Éº„ÇπË©≥Á¥∞„Å®È¶¨Âà∏Ë≥ºÂÖ•ÁîªÈù¢„ÇíË°®Á§∫
 * @param {MessageComponentInteraction} interaction - „Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥
 * @param {string} raceId - „É¨„Éº„ÇπID
 * @param {string} dateString - Êó•‰ªò
 * @param {Object} history - „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥Â±•Ê≠¥
 */
async function displayRaceDetail(interaction, raceId, dateString, history) {
  try {
    // „É¨„Éº„ÇπÊÉÖÂ†±„ÇíÂèñÂæó
    const race = await getRaceById(raceId);

    if (!race) {
      return await interaction.editReply({
        content: `„É¨„Éº„ÇπID ${raceId} „ÅÆÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ`,
        embeds: [],
        components: []
      });
    }

    // „É¨„Éº„Çπ„Çπ„ÉÜ„Éº„Çø„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
    if (race.status === 'completed') {
      return await interaction.editReply({
        content: `„Åì„ÅÆ„É¨„Éº„Çπ„ÅØÊó¢„Å´ÁµÇ‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇÁµêÊûú„ÅØ \`/result ${raceId}\` „ÅßÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô„ÄÇ`,
        embeds: [],
        components: []
      });
    }

    // „É¨„Éº„ÇπÁô∫Ëµ∞ÊôÇÈñì„ÅÆ2ÂàÜÂâç„Åã„Å©„ÅÜ„Åã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    const now = new Date();
    const raceTime = new Date(
      race.date.slice(0, 4),
      parseInt(race.date.slice(4, 6)) - 1,
      race.date.slice(6, 8),
      race.time.split(':')[0],
      race.time.split(':')[1]
    );

    const twoMinutesBefore = new Date(raceTime.getTime() - 2 * 60 * 1000);

    if (now > twoMinutesBefore) {
      return await interaction.editReply({
        content: `„Åì„ÅÆ„É¨„Éº„Çπ„ÅØÁô∫Ëµ∞2ÂàÜÂâç„ÇíÈÅé„Åé„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅÈ¶¨Âà∏„ÇíË≥ºÂÖ•„Åß„Åç„Åæ„Åõ„Çì„ÄÇ`,
        embeds: [],
        components: []
      });
    }

    // „É¨„Éº„ÇπË©≥Á¥∞„ÅÆ„Ç®„É≥„Éô„ÉÉ„Éâ
    const raceEmbed = new EmbedBuilder()
      .setTitle(`üèá ${race.venue} ${race.number}R ${race.name}`)
      .setDescription(`Áô∫Ëµ∞ÊôÇÂàª: ${race.time}\n„É¨„Éº„ÇπID: ${race.id}`)
      .setColor(race.type === 'jra' ? 0x00b0f4 : 0xf47200)
      .setTimestamp();

    // Âá∫Ëµ∞È¶¨ÊÉÖÂ†±
    let horsesInfo = '';
    let horses = race.horses || [];

    // Âá∫Ëµ∞È¶¨ÊÉÖÂ†±„Åå„Å™„ÅÑÂ†¥Âêà
    if (!horses || horses.length === 0) {
      horsesInfo = 'Âá∫Ëµ∞È¶¨ÊÉÖÂ†±„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ';
    } else {
      // ÁÑ°Âäπ„Å™„Ç®„É≥„Éà„É™„Éº„ÇíÈô§Â§ñ
      const validHorses = horses.filter(horse =>
        horse.horseNumber > 0 &&
        horse.horseName &&
        horse.horseName !== 'Áï™È¶¨' &&
        horse.horseName !== '‰∏çÊòé'
      );

      // È¶¨Áï™„Åß„ÇΩ„Éº„Éà
      const sortedHorses = [...validHorses].sort((a, b) => a.horseNumber - b.horseNumber);

      // ÈÅ©Âàá„Å™Ë¶ãÂá∫„Åó„ÇíËøΩÂä†
      horsesInfo = `**„ÄêÂá∫Ëµ∞È¶¨‰∏ÄË¶ß„Äë** (${sortedHorses.length}È†≠)\n\n`;

      // ÂêÑÂá∫Ëµ∞È¶¨„ÅÆÊÉÖÂ†±Ë°®Á§∫
      sortedHorses.forEach(horse => {
        const horseName = horse.isCanceled ? 
          `~~${horse.frameNumber}Êû†${horse.horseNumber}Áï™: ${horse.horseName} ${'  ( ' + horse.jockey + ' )'}~~` : 
          `**${horse.frameNumber}Êû†${horse.horseNumber}Áï™**: ${horse.horseName} ${horse.odds ? '\n' + horse.jockey : '  ( ' + horse.jockey + ' )'}`;
        
        let horseString = `${horseName}  ${horse.odds || ''} ${horse.popularity ? '( ' + horse.popularity + '‰∫∫Ê∞ó )' : ''}`;
        horsesInfo += horseString + '\n\n';
      });

      // Èï∑„Åô„Åé„ÇãÂ†¥Âêà„ÅØÈÅ©Âàá„Å´ÁúÅÁï•
      if (horsesInfo.length > 1024) {
        horsesInfo = horsesInfo.substring(0, 1000) + '...\n\n(Ë°®Á§∫„Åó„Åç„Çå„Å™„ÅÑÈ¶¨„Åå„ÅÑ„Åæ„Åô)';
      }
    }

    raceEmbed.addFields({ name: 'Âá∫Ëµ∞È¶¨', value: horsesInfo });

    // È¶¨Âà∏Á®ÆÈ°ûÈÅ∏Êäû„É°„Éã„É•„Éº
    const betTypeRow = new ActionRowBuilder()
      .addComponents(
        new StringSelectMenuBuilder()
          .setCustomId(`bet_select_type_${raceId}`)
          .setPlaceholder('È¶¨Âà∏„ÅÆÁ®ÆÈ°û„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ')
          .addOptions([
            { label: 'ÂçòÂãù', value: 'tansho', description: '1ÁùÄ„Å´„Å™„ÇãÈ¶¨„ÇíÂΩì„Å¶„Çã', emoji: 'ü•á' },
            { label: 'Ë§áÂãù', value: 'fukusho', description: '3ÁùÄ‰ª•ÂÜÖ„Å´ÂÖ•„ÇãÈ¶¨„ÇíÂΩì„Å¶„Çã', emoji: 'üèÜ' },
            { label: 'Êû†ÈÄ£', value: 'wakuren', description: '1ÁùÄ„Å®2ÁùÄ„Å´„Å™„ÇãÊû†„ÇíÂΩì„Å¶„ÇãÔºàÈ†Ü‰∏çÂêåÔºâ', emoji: 'üî¢' },
            { label: 'È¶¨ÈÄ£', value: 'umaren', description: '1ÁùÄ„Å®2ÁùÄ„Å´„Å™„ÇãÈ¶¨„ÇíÂΩì„Å¶„ÇãÔºàÈ†Ü‰∏çÂêåÔºâ', emoji: 'üêé' },
            { label: '„ÉØ„Ç§„Éâ', value: 'wide', description: '3ÁùÄ‰ª•ÂÜÖ„Å´ÂÖ•„Çã2È†≠„ÅÆÈ¶¨„ÇíÂΩì„Å¶„ÇãÔºàÈ†Ü‰∏çÂêåÔºâ', emoji: 'üìä' },
            { label: 'È¶¨Âçò', value: 'umatan', description: '1ÁùÄ„Å®2ÁùÄ„Å´„Å™„ÇãÈ¶¨„ÇíÂΩì„Å¶„ÇãÔºàÈ†ÜÂ∫èÈÄö„ÇäÔºâ', emoji: 'üéØ' },
            { label: '‰∏âÈÄ£Ë§á', value: 'sanrenpuku', description: '1ÁùÄ„Åã„Çâ3ÁùÄ„Åæ„Åß„ÅÆÈ¶¨„ÇíÂΩì„Å¶„ÇãÔºàÈ†Ü‰∏çÂêåÔºâ', emoji: 'üîÑ' },
            { label: '‰∏âÈÄ£Âçò', value: 'sanrentan', description: '1ÁùÄ„Åã„Çâ3ÁùÄ„Åæ„Åß„ÅÆÈ¶¨„ÇíÂΩì„Å¶„ÇãÔºàÈ†ÜÂ∫èÈÄö„ÇäÔºâ', emoji: 'üíØ' }
          ])
      );

    // Êàª„Çã„Éú„Çø„É≥
    const backRow = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`races_back_${dateString}`)
          .setLabel('„É¨„Éº„Çπ‰∏ÄË¶ß„Å´Êàª„Çã')
          .setStyle(ButtonStyle.Secondary)
      );

    await interaction.editReply({
      content: `„É¨„Éº„ÇπË©≥Á¥∞„Å®È¶¨Âà∏Ë≥ºÂÖ•ÁîªÈù¢„Åß„Åô„ÄÇÈ¶¨Âà∏„ÇíË≥ºÂÖ•„Åô„Çã„Å´„ÅØ„ÄÅ„Åæ„ÅöÈ¶¨Âà∏„ÅÆÁ®ÆÈ°û„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`,
      embeds: [raceEmbed],
      components: [betTypeRow, backRow]
    });

  } catch (error) {
    logger.error(`„É¨„Éº„ÇπË©≥Á¥∞Ë°®Á§∫‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error}`);
    await interaction.editReply({ content: 'Ë©≥Á¥∞„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ' });
  }
}

/**
 * „É¨„Éº„Çπ„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ„Å´Âøú„Åò„ÅüÁµµÊñáÂ≠ó„ÇíÂèñÂæó
 * @param {string} status - „É¨„Éº„Çπ„Çπ„ÉÜ„Éº„Çø„Çπ
 * @returns {string} ÂØæÂøú„Åô„ÇãÁµµÊñáÂ≠ó
 */
function getStatusEmoji(status) {
  switch (status) {
    case 'upcoming':
      return '‚è≥';
    case 'in_progress':
      return 'üèá';
    case 'completed':
      return '‚úÖ';
    default:
      return '‚ùì';
  }
}